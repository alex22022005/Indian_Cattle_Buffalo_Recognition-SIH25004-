// Global variables
let currentLang = "en";
let buffaloCount = 0;
let cattleCount = 0;
let buffaloHistory = [];
let cattleHistory = [];
let userId = null;

// API Configuration
const API_BASE_URL = 'http://localhost:5000/api'; // Change this for production

// Complete multi-language translations
const translations = {
  en: {
    ui: {
      title: "Buffalo & Cattle Breed Recognition",
      heroTitle: "AI-Powered Breed Identification System",
      heroDesc: "Quickly and accurately identify the breeds of Indian cattle and buffaloes using images. Keep track of breed history, measurements, productivity, and other essential data for effective farm management and research.",
      feature1Title: "тЬЕ Accurate & Fast",
      feature1Desc: "AI-powered image recognition ensures reliable breed identification in seconds.",
      feature2Title: "ЁЯУК Historical Tracking", 
      feature2Desc: "Maintain a complete history of animal uploads including measurements and productivity.",
      feature3Title: "ЁЯФТ Privacy & Control",
      feature3Desc: "Clear your upload history anytime to ensure your data is secure.",
      getStarted: "Get Started",
      returnHome: "Return to Home",
      exportData: "Export Data",
      importData: "Import Data",
      dataManagement: "Data Management",
      deleteEntry: "Delete",
      action: "Action",
      home: "Home",
      export: "Export",
      import: "Import",
      buffaloSection: "Buffalo Section",
      cattleSection: "Cattle Section",
      reUpload: "Re-upload",
      measurements: "Measurements",
      breedInformation: "Breed Information",
      cattleMeasurements: "Cattle Measurements", 
      cattleBreedInfo: "Cattle Breed Info",
      uploadHistory: "Upload History",
      clearHistory: "Clear All History",
      bodyLength: "Body Length",
      height: "Height",
      chestWidth: "Chest Width",
      rumpAngle: "Rump Angle",
      breedName: "Breed Name",
      originState: "Origin State",
      keyFeatures: "Key Features",
      productivity: "Productivity",
      fatPercent: "Fat%",
      confidence: "Confidence",
      image: "Image"
    },
    buffalo: {
      bodyLength: "150 cm", height: "140 cm", chestWidth: "60 cm", rumpAngle: "30┬░",
      breedName: "Murrah", origin: "Punjab", features: "High milk yield, jet black color",
      productivity: "3000 liters/year", fat: "7%", confidence: "95%"
    },
    cattle: {
      bodyLength: "160 cm", height: "130 cm", chestWidth: "55 cm", rumpAngle: "25┬░",
      breedName: "Gir", origin: "Gujarat", features: "High milk yield, red coat",
      productivity: "1500тАУ2500 L", confidence: "95%"
    }
  },
  ta: {
    ui: {
      title: "роОро░рпБроорпИ рооро▒рпНро▒рпБроорпН роХро╛ро▓рпНроироЯрпИ роЗрой роЕроЯрпИропро╛ро│роорпН",
      heroTitle: "AI-роЗропроЩрпНроХрпБроорпН роЗрой роЕроЯрпИропро╛ро│ роЕроорпИрокрпНрокрпБ",
      heroDesc: "рокроЯроЩрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роЗроирпНродро┐роп роХро╛ро▓рпНроироЯрпИроХро│рпН рооро▒рпНро▒рпБроорпН роОро░рпБроорпИроХро│ро┐ройрпН роЗройроЩрпНроХро│рпИ ро╡ро┐ро░рпИро╡ро╛роХро╡рпБроорпН родрпБро▓рпНро▓ро┐ропрооро╛роХро╡рпБроорпН роЕроЯрпИропро╛ро│роорпН роХро╛рогрпБроЩрпНроХро│рпН. рокрогрпНрогрпИ роорпЗро▓ро╛рогрпНроорпИ рооро▒рпНро▒рпБроорпН роЖро░ро╛ропрпНроЪрпНроЪро┐роХрпНроХрпБ роЗрой ро╡ро░ро▓ро╛ро▒рпБ, роЕро│ро╡рпАроЯрпБроХро│рпН, роЙро▒рпНрокродрпНродро┐родрпНродро┐ро▒ройрпН рооро▒рпНро▒рпБроорпН рокро┐ро▒ роЕродрпНродро┐ропро╛ро╡роЪро┐роп родро░ро╡рпБроХро│рпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН.",
      feature1Title: "тЬЕ родрпБро▓рпНро▓ро┐ропрооро╛рой рооро▒рпНро▒рпБроорпН ро╡рпЗроХрооро╛рой",
      feature1Desc: "AI-роЗропроЩрпНроХрпБроорпН рокроЯроорпН роЕроЯрпИропро╛ро│роорпН роХро╛рогро▓рпН роирпКроЯро┐роХро│ро┐ро▓рпН роироорпНрокроХрооро╛рой роЗрой роЕроЯрпИропро╛ро│родрпНродрпИ роЙро▒рпБродро┐ роЪрпЖропрпНроХро┐ро▒родрпБ.",
      feature2Title: "ЁЯУК ро╡ро░ро▓ро╛ро▒рпНро▒рпБ роХрогрпНроХро╛рогро┐рокрпНрокрпБ",
      feature2Desc: "роЕро│ро╡рпАроЯрпБроХро│рпН рооро▒рпНро▒рпБроорпН роЙро▒рпНрокродрпНродро┐родрпНродро┐ро▒ройрпН роЙроЯрпНрокроЯ ро╡ро┐ро▓роЩрпНроХрпБ рокродро┐ро╡рпЗро▒рпНро▒роЩрпНроХро│ро┐ройрпН роорпБро┤рпБроорпИропро╛рой ро╡ро░ро▓ро╛ро▒рпНро▒рпИрокрпН рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН.",
      feature3Title: "ЁЯФТ родройро┐ропрпБро░ро┐роорпИ рооро▒рпНро▒рпБроорпН роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ",
      feature3Desc: "роЙроЩрпНроХро│рпН родро░ро╡рпБ рокро╛родрпБроХро╛рокрпНрокро╛роХ роЗро░рпБрокрпНрокродрпИ роЙро▒рпБродро┐роЪрпЖропрпНроп роОроирпНрод роирпЗро░родрпНродро┐ро▓рпБроорпН роЙроЩрпНроХро│рпН рокродро┐ро╡рпЗро▒рпНро▒ ро╡ро░ро▓ро╛ро▒рпНро▒рпИ роЕро┤ро┐роХрпНроХро╡рпБроорпН.",
      getStarted: "родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН",
      returnHome: "ро╡рпАроЯрпНроЯро┐ро▒рпНроХрпБ родро┐ро░рпБроорпНрокрпБ",
      exportData: "родро░ро╡рпБ роПро▒рпНро▒рпБроородро┐",
      importData: "родро░ро╡рпБ роЗро▒роХрпНроХрпБроородро┐",
      dataManagement: "родро░ро╡рпБ роорпЗро▓ро╛рогрпНроорпИ",
      deleteEntry: "роЕро┤ро┐роХрпНроХро╡рпБроорпН",
      action: "роЪрпЖропро▓рпН",
      home: "ро╡рпАроЯрпБ",
      export: "роПро▒рпНро▒рпБроородро┐",
      import: "роЗро▒роХрпНроХрпБроородро┐",
      buffaloSection: "роОро░рпБроорпИ рокро┐ро░ро┐ро╡рпБ",
      cattleSection: "роХро╛ро▓рпНроироЯрпИ рокро┐ро░ро┐ро╡рпБ", 
      reUpload: "роорпАрогрпНроЯрпБроорпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
      measurements: "роЕро│ро╡рпАроЯрпБроХро│рпН",
      breedInformation: "роЗрой родроХро╡ро▓рпН",
      cattleMeasurements: "роХро╛ро▓рпНроироЯрпИ роЕро│ро╡рпАроЯрпБроХро│рпН",
      cattleBreedInfo: "роХро╛ро▓рпНроироЯрпИ роЗрой родроХро╡ро▓рпН",
      uploadHistory: "рокродро┐ро╡рпЗро▒рпНро▒ ро╡ро░ро▓ро╛ро▒рпБ",
      clearHistory: "роЕройрпИродрпНродрпБ ро╡ро░ро▓ро╛ро▒рпНро▒рпИропрпБроорпН роЕро┤ро┐роХрпНроХро╡рпБроорпН",
      bodyLength: "роЙроЯро▓рпН роирпАро│роорпН",
      height: "роЙропро░роорпН",
      chestWidth: "рооро╛ро░рпНрокрпБ роЕроХро▓роорпН",
      rumpAngle: "роЗроЯрпБрокрпНрокрпБ роХрпЛрогроорпН",
      breedName: "роЗрой рокрпЖропро░рпН",
      originState: "родрпЛро▒рпНро▒ рооро╛роиро┐ро▓роорпН",
      keyFeatures: "роорпБроХрпНроХро┐роп роЕроорпНроЪроЩрпНроХро│рпН",
      productivity: "роЙро▒рпНрокродрпНродро┐родрпНродро┐ро▒ройрпН",
      fatPercent: "роХрпКро┤рпБрокрпНрокрпБ%",
      confidence: "роироорпНрокро┐роХрпНроХрпИ",
      image: "рокроЯроорпН"
    },
    buffalo: {
      bodyLength: "150 роЪрпЖ.роорпА", height: "140 роЪрпЖ.роорпА", chestWidth: "60 роЪрпЖ.роорпА", rumpAngle: "30┬░",
      breedName: "роорпБро░рпНро░ро╛", origin: "рокроЮрпНроЪро╛рокрпН", features: "роЕродро┐роХ рокро╛ро▓рпН роЙро▒рпНрокродрпНродро┐, роХро░рпБрокрпНрокрпБ роиро┐ро▒роорпН",
      productivity: "3000 ро▓ро┐роЯрпНроЯро░рпН/роЖрогрпНроЯрпБ", fat: "7%", confidence: "95%"
    },
    cattle: {
      bodyLength: "160 роЪрпЖ.роорпА", height: "130 роЪрпЖ.роорпА", chestWidth: "55 роЪрпЖ.роорпА", rumpAngle: "25┬░",
      breedName: "роХро┐ро░рпН", origin: "роХрпБроЬро░ро╛родрпН", features: "роЕродро┐роХ рокро╛ро▓рпН роЙро▒рпНрокродрпНродро┐, роЪро┐ро╡рокрпНрокрпБ роиро┐ро▒роорпН",
      productivity: "1500тАУ2500 ро▓ро┐", confidence: "95%"
    }
  },
  hi: {
    ui: {
      title: "рднреИрдВрд╕ рдФрд░ рдкрд╢реБ рдирд╕реНрд▓ рдкрд╣рдЪрд╛рди",
      heroTitle: "AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдирд╕реНрд▓ рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА",
      heroDesc: "рдЫрд╡рд┐рдпреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рднрд╛рд░рддреАрдп рдкрд╢реБрдУрдВ рдФрд░ рднреИрдВрд╕реЛрдВ рдХреА рдирд╕реНрд▓реЛрдВ рдХреЛ рдЬрд▓реНрджреА рдФрд░ рд╕рдЯреАрдХ рд░реВрдк рд╕реЗ рдкрд╣рдЪрд╛рдиреЗрдВред рдкреНрд░рднрд╛рд╡реА рдЦреЗрдд рдкреНрд░рдмрдВрдзрди рдФрд░ рдЕрдиреБрд╕рдВрдзрд╛рди рдХреЗ рд▓рд┐рдП рдирд╕реНрд▓ рдЗрддрд┐рд╣рд╛рд╕, рдорд╛рдк, рдЙрддреНрдкрд╛рджрдХрддрд╛ рдФрд░ рдЕрдиреНрдп рдЖрд╡рд╢реНрдпрдХ рдбреЗрдЯрд╛ рдХрд╛ рдЯреНрд░реИрдХ рд░рдЦреЗрдВред",
      feature1Title: "тЬЕ рд╕рдЯреАрдХ рдФрд░ рддреЗрдЬрд╝",
      feature1Desc: "AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЫрд╡рд┐ рдкрд╣рдЪрд╛рди рд╕реЗрдХрдВрдбреЛрдВ рдореЗрдВ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рдирд╕реНрд▓ рдкрд╣рдЪрд╛рди рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреА рд╣реИред",
      feature2Title: "ЁЯУК рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдЯреНрд░реИрдХрд┐рдВрдЧ",
      feature2Desc: "рдорд╛рдк рдФрд░ рдЙрддреНрдкрд╛рджрдХрддрд╛ рд╕рд╣рд┐рдд рдкрд╢реБ рдЕрдкрд▓реЛрдб рдХрд╛ рдкреВрд░рд╛ рдЗрддрд┐рд╣рд╛рд╕ рдмрдирд╛рдП рд░рдЦреЗрдВред",
      feature3Title: "ЁЯФТ рдЧреЛрдкрдиреАрдпрддрд╛ рдФрд░ рдирд┐рдпрдВрддреНрд░рдг",
      feature3Desc: "рдЕрдкрдиреЗ рдбреЗрдЯрд╛ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрднреА рднреА рдЕрдкрдирд╛ рдЕрдкрд▓реЛрдб рдЗрддрд┐рд╣рд╛рд╕ рд╕рд╛рдлрд╝ рдХрд░реЗрдВред",
      getStarted: "рд╢реБрд░реВ рдХрд░реЗрдВ",
      returnHome: "рдШрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ",
      exportData: "рдбреЗрдЯрд╛ рдирд┐рд░реНрдпрд╛рдд рдХрд░реЗрдВ",
      importData: "рдбреЗрдЯрд╛ рдЖрдпрд╛рдд рдХрд░реЗрдВ",
      dataManagement: "рдбреЗрдЯрд╛ рдкреНрд░рдмрдВрдзрди",
      deleteEntry: "рд╣рдЯрд╛рдПрдВ",
      action: "рдХрд╛рд░реНрдп",
      home: "рдШрд░",
      export: "рдирд┐рд░реНрдпрд╛рдд",
      import: "рдЖрдпрд╛рдд",
      buffaloSection: "рднреИрдВрд╕ рдЕрдиреБрднрд╛рдЧ",
      cattleSection: "рдкрд╢реБ рдЕрдиреБрднрд╛рдЧ",
      reUpload: "рдкреБрдирдГ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
      measurements: "рдорд╛рдк",
      breedInformation: "рдирд╕реНрд▓ рдХреА рдЬрд╛рдирдХрд╛рд░реА",
      cattleMeasurements: "рдкрд╢реБ рдорд╛рдк",
      cattleBreedInfo: "рдкрд╢реБ рдирд╕реНрд▓ рдЬрд╛рдирдХрд╛рд░реА",
      uploadHistory: "рдЕрдкрд▓реЛрдб рдЗрддрд┐рд╣рд╛рд╕",
      clearHistory: "рд╕рднреА рдЗрддрд┐рд╣рд╛рд╕ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
      bodyLength: "рд╢рд░реАрд░ рдХреА рд▓рдВрдмрд╛рдИ",
      height: "рдКрдВрдЪрд╛рдИ",
      chestWidth: "рдЫрд╛рддреА рдХреА рдЪреМрдбрд╝рд╛рдИ",
      rumpAngle: "рдХреВрд▓реНрд╣реЗ рдХрд╛ рдХреЛрдг",
      breedName: "рдирд╕реНрд▓ рдХрд╛ рдирд╛рдо",
      originState: "рдореВрд▓ рд░рд╛рдЬреНрдп",
      keyFeatures: "рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ",
      productivity: "рдЙрддреНрдкрд╛рджрдХрддрд╛",
      fatPercent: "рд╡рд╕рд╛%",
      confidence: "рд╡рд┐рд╢реНрд╡рд╛рд╕",
      image: "рдЫрд╡рд┐"
    },
    buffalo: {
      bodyLength: "150 рд╕реЗрдореА", height: "140 рд╕реЗрдореА", chestWidth: "60 рд╕реЗрдореА", rumpAngle: "30┬░",
      breedName: "рдореБрд░реНрд░рд╛", origin: "рдкрдВрдЬрд╛рдм", features: "рдЙрдЪреНрдЪ рджреВрдз рдЙрддреНрдкрд╛рджрди, рдХрд╛рд▓рд╛ рд░рдВрдЧ",
      productivity: "3000 рд▓реАрдЯрд░/рд╡рд░реНрд╖", fat: "7%", confidence: "95%"
    },
    cattle: {
      bodyLength: "160 рд╕реЗрдореА", height: "130 рд╕реЗрдореА", chestWidth: "55 рд╕реЗрдореА", rumpAngle: "25┬░",
      breedName: "рдЧрд┐рд░", origin: "рдЧреБрдЬрд░рд╛рдд", features: "рдЙрдЪреНрдЪ рджреВрдз рдЙрддреНрдкрд╛рджрди, рд▓рд╛рд▓ рд░рдВрдЧ",
      productivity: "1500тАУ2500 рд▓реА", confidence: "95%"
    }
  },
  ml: {
    ui: {
      title: "р┤Ор┤░р╡Бр┤ор┤пр╡Бр┤В р┤Хр┤ир╡Нр┤ир╡Бр┤Хр┤╛р┤▓р┤┐ р┤Зр┤и р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
      heroTitle: "AI-р┤кр┤╡р╡╝р┤бр╡Н р┤Зр┤и р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜ р┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤В",
      heroDesc: "р┤Ър┤┐р┤др╡Нр┤░р┤Щр╡Нр┤Щр╡╛ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤Зр┤ир╡Нр┤др╡Нр┤пр╡╗ р┤Хр┤ир╡Нр┤ир╡Бр┤Хр┤╛р┤▓р┤┐р┤Хр┤│р╡Бр┤Яр╡Жр┤пр╡Бр┤В р┤Ор┤░р╡Бр┤ор┤Хр┤│р╡Бр┤Яр╡Жр┤пр╡Бр┤В р┤Зр┤ир┤Щр╡Нр┤Щр╡╛ р┤╡р╡Зр┤Чр┤др╡Нр┤др┤┐р┤▓р╡Бр┤В р┤Хр╡Гр┤др╡Нр┤пр┤ор┤╛р┤пр╡Бр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡Бр┤Х. р┤лр┤▓р┤кр╡Нр┤░р┤жр┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐ р┤ор┤╛р┤ир╡Зр┤Ьр╡Нр┤ор╡Жр┤ир╡Нр┤▒р┤┐р┤ир╡Бр┤В р┤Чр┤╡р╡Зр┤╖р┤гр┤др╡Нр┤др┤┐р┤ир╡Бр┤ор┤╛р┤пр┤┐ р┤Зр┤и р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В, р┤Ер┤│р┤╡р╡Бр┤Хр╡╛, р┤Йр╡╜р┤кр╡Нр┤кр┤╛р┤жр┤ир┤Хр╡Нр┤╖р┤ор┤д, р┤ор┤▒р╡Нр┤▒р╡Н р┤Ер┤др╡Нр┤пр┤╛р┤╡р┤╢р╡Нр┤п р┤бр┤╛р┤▒р╡Нр┤▒ р┤Ор┤ир╡Нр┤ир┤┐р┤╡ р┤Яр╡Нр┤░р┤╛р┤Хр╡Нр┤Хр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х.",
      feature1Title: "тЬЕ р┤Хр╡Гр┤др╡Нр┤пр┤╡р╡Бр┤В р┤╡р╡Зр┤Чр┤др╡Нр┤др┤┐р┤▓р╡Бр┤│р╡Нр┤│р┤др╡Бр┤В",
      feature1Desc: "AI-р┤кр┤╡р╡╝р┤бр╡Н р┤Зр┤ор╡Зр┤Ьр╡Н р┤▒р╡Жр┤Хр╡Нр┤Хр┤Чр╡Нр┤ир┤┐р┤╖р╡╗ р┤╕р╡Жр┤Хр╡Нр┤Хр╡╗р┤бр╡Бр┤Хр╡╛р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│р┤┐р╡╜ р┤╡р┤┐р┤╢р╡Нр┤╡р┤╕р┤ир╡Ар┤пр┤ор┤╛р┤п р┤Зр┤и р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜ р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
      feature2Title: "ЁЯУК р┤Ър┤░р┤┐р┤др╡Нр┤░р┤кр┤░р┤ор┤╛р┤п р┤Яр╡Нр┤░р┤╛р┤Хр╡Нр┤Хр┤┐р┤Вр┤Чр╡Н",
      feature2Desc: "р┤Ер┤│р┤╡р╡Бр┤Хр┤│р╡Бр┤В р┤Йр╡╜р┤кр╡Нр┤кр┤╛р┤жр┤ир┤Хр╡Нр┤╖р┤ор┤др┤пр╡Бр┤В р┤Йр╡╛р┤кр╡Нр┤кр╡Жр┤Яр╡Ж р┤ор╡Гр┤Чр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Бр┤Хр┤│р╡Бр┤Яр╡Ж р┤кр╡Вр╡╝р┤гр╡Нр┤гр┤ор┤╛р┤п р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В р┤кр┤░р┤┐р┤кр┤╛р┤▓р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
      feature3Title: "ЁЯФТ р┤╕р╡Нр┤╡р┤Хр┤╛р┤░р╡Нр┤пр┤др┤пр╡Бр┤В р┤ир┤┐р┤пр┤ир╡Нр┤др╡Нр┤░р┤гр┤╡р╡Бр┤В",
      feature3Desc: "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤бр┤╛р┤▒р╡Нр┤▒ р┤╕р╡Бр┤░р┤Хр╡Нр┤╖р┤┐р┤др┤ор┤╛р┤гр╡Жр┤ир╡Нр┤ир╡Н р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Ор┤кр╡Нр┤кр╡Лр╡╛ р┤╡р╡Зр┤гр┤ор╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В р┤ор┤╛р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х.",
      getStarted: "р┤Жр┤░р┤Вр┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
      returnHome: "р┤╡р╡Ар┤Яр╡Нр┤Яр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤ор┤Яр┤Щр╡Нр┤Щр╡Бр┤Х",
      exportData: "р┤бр┤╛р┤▒р╡Нр┤▒ р┤Ор┤Хр╡Нр┤╕р╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
      importData: "р┤бр┤╛р┤▒р╡Нр┤▒ р┤Зр┤ор╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
      dataManagement: "р┤бр┤╛р┤▒р╡Нр┤▒ р┤ор┤╛р┤ир╡Зр┤Ьр╡Нр┤ор╡Жр┤ир╡Нр┤▒р╡Н",
      deleteEntry: "р┤Зр┤▓р╡Нр┤▓р┤╛р┤др┤╛р┤Хр╡Нр┤Хр╡Бр┤Х",
      action: "р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤В",
      home: "р┤╡р╡Ар┤Яр╡Н",
      export: "р┤Ор┤Хр╡Нр┤╕р╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н",
      import: "р┤Зр┤ор╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н",
      buffaloSection: "р┤Ор┤░р╡Бр┤о р┤╡р┤┐р┤нр┤╛р┤Чр┤В",
      cattleSection: "р┤Хр┤ир╡Нр┤ир╡Бр┤Хр┤╛р┤▓р┤┐ р┤╡р┤┐р┤нр┤╛р┤Чр┤В",
      reUpload: "р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
      measurements: "р┤Ер┤│р┤╡р╡Бр┤Хр╡╛",
      breedInformation: "р┤Зр┤и р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛",
      cattleMeasurements: "р┤Хр┤ир╡Нр┤ир╡Бр┤Хр┤╛р┤▓р┤┐ р┤Ер┤│р┤╡р╡Бр┤Хр╡╛",
      cattleBreedInfo: "р┤Хр┤ир╡Нр┤ир╡Бр┤Хр┤╛р┤▓р┤┐ р┤Зр┤и р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛",
      uploadHistory: "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър┤░р┤┐р┤др╡Нр┤░р┤В",
      clearHistory: "р┤Ор┤▓р╡Нр┤▓р┤╛ р┤Ър┤░р┤┐р┤др╡Нр┤░р┤╡р╡Бр┤В р┤ор┤╛р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х",
      bodyLength: "р┤╢р┤░р╡Ар┤░ р┤ир╡Ар┤│р┤В",
      height: "р┤Йр┤пр┤░р┤В",
      chestWidth: "р┤ир╡Жр┤Юр╡Нр┤Ър┤┐р┤ир╡Нр┤▒р╡Ж р┤╡р╡Ар┤др┤┐",
      rumpAngle: "р┤Хр┤Яр┤┐р┤кр╡Нр┤░р┤жр╡Зр┤╢р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Хр╡Лр╡║",
      breedName: "р┤Зр┤ир┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤кр╡Зр┤░р╡Н",
      originState: "р┤Йр┤др╡Нр┤нр┤╡ р┤╕р┤Вр┤╕р╡Нр┤ер┤╛р┤ир┤В",
      keyFeatures: "р┤кр╡Нр┤░р┤зр┤╛р┤и р┤╕р┤╡р┤┐р┤╢р╡Зр┤╖р┤др┤Хр╡╛",
      productivity: "р┤Йр╡╜р┤кр╡Нр┤кр┤╛р┤жр┤ир┤Хр╡Нр┤╖р┤ор┤д",
      fatPercent: "р┤Хр╡Кр┤┤р╡Бр┤кр╡Нр┤кр╡Н%",
      confidence: "р┤Жр┤др╡Нр┤ор┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕р┤В",
      image: "р┤Ър┤┐р┤др╡Нр┤░р┤В"
    },
    buffalo: {
      bodyLength: "150 р┤╕р╡Ж.р┤ор╡А", height: "140 р┤╕р╡Ж.р┤ор╡А", chestWidth: "60 р┤╕р╡Ж.р┤ор╡А", rumpAngle: "30┬░",
      breedName: "р┤ор╡Бр┤▒р┤╛", origin: "р┤кр┤Юр╡Нр┤Ър┤╛р┤мр╡Н", features: "р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤кр┤╛р╡╜ р┤Йр┤др╡Нр┤кр┤╛р┤жр┤ир┤В, р┤Хр┤▒р╡Бр┤др╡Нр┤д р┤ир┤┐р┤▒р┤В",
      productivity: "3000 р┤▓р┤┐р┤▒р╡Нр┤▒р╡╝/р┤╡р╡╝р┤╖р┤В", fat: "7%", confidence: "95%"
    },
    cattle: {
      bodyLength: "160 р┤╕р╡Ж.р┤ор╡А", height: "130 р┤╕р╡Ж.р┤ор╡А", chestWidth: "55 р┤╕р╡Ж.р┤ор╡А", rumpAngle: "25┬░",
      breedName: "р┤Чр┤┐р╡╝", origin: "р┤Чр╡Бр┤Ьр┤▒р┤╛р┤др╡Нр┤др╡Н", features: "р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤кр┤╛р╡╜ р┤Йр┤др╡Нр┤кр┤╛р┤жр┤ир┤В, р┤Ър╡Бр┤╡р┤ир╡Нр┤и р┤ир┤┐р┤▒р┤В",
      productivity: "1500тАУ2500 р┤▓р┤┐", confidence: "95%"
    }
  }
};

// Navigation functions
function startApp() {
  document.getElementById("landingPage").classList.add("hidden");
  document.getElementById("mainPage").classList.remove("hidden");
  document.getElementById("navbar").classList.remove("hidden");
  document.getElementById("returnToTop").classList.remove("hidden");
  document.body.classList.add("navbar-visible");
  updateUILanguage();
}

function returnHome() {
  document.getElementById("mainPage").classList.add("hidden");
  document.getElementById("landingPage").classList.remove("hidden");
  document.getElementById("navbar").classList.add("hidden");
  document.getElementById("returnToTop").classList.add("hidden");
  document.body.classList.remove("navbar-visible");
}

// Scroll to top function
function scrollToTop() {
  window.scrollTo({
    top: 0,
    behavior: 'smooth'
  });
}

// Show/hide return to top button based on scroll position
function handleScroll() {
  const returnToTopBtn = document.getElementById("returnToTop");
  const isMainPageVisible = !document.getElementById("mainPage").classList.contains("hidden");
  
  // Only show return to top button on main page and when scrolled down
  if (isMainPageVisible && window.pageYOffset > 300) {
    returnToTopBtn.classList.add("show");
  } else {
    returnToTopBtn.classList.remove("show");
  }
}

// Individual delete functions
function deleteBuffaloEntry(index) {
  if (confirm('Are you sure you want to delete this entry?')) {
    buffaloHistory.splice(index, 1);
    buffaloCount = buffaloHistory.length;
    saveToLocalStorage();
    rebuildHistoryTables();
  }
}

function deleteCattleEntry(index) {
  if (confirm('Are you sure you want to delete this entry?')) {
    cattleHistory.splice(index, 1);
    cattleCount = cattleHistory.length;
    saveToLocalStorage();
    rebuildHistoryTables();
  }
}

// Language functions
function changeLanguage() {
  currentLang = document.getElementById("languageSelect").value;
  updateUILanguage();
  saveToLocalStorage(); // Save language preference
}

function updateUILanguage() {
  const t = translations[currentLang].ui;
  
  // Update all translatable elements
  const elements = {
    'app-title': t.title,
    'main-app-title': t.title,
    'hero-title': t.heroTitle,
    'hero-desc': t.heroDesc,
    'feature1-title': t.feature1Title,
    'feature1-desc': t.feature1Desc,
    'feature2-title': t.feature2Title,
    'feature2-desc': t.feature2Desc,
    'feature3-title': t.feature3Title,
    'feature3-desc': t.feature3Desc,
    'get-started-btn': t.getStarted,
    'return-home-btn': t.returnHome,
    'export-data-btn': t.exportData,
    'import-data-btn': t.importData,
    'buffalo-section-title': t.buffaloSection,
    'cattle-section-title': t.cattleSection,
    'buffalo-reupload-btn': t.reUpload,
    'cattle-reupload-btn': t.reUpload,
    'measurements-title': t.measurements,
    'breed-info-title': t.breedInformation,
    'cattle-measurements-title': t.cattleMeasurements,
    'cattle-breed-info-title': t.cattleBreedInfo,
    'buffalo-history-title': t.uploadHistory + ' (' + t.buffaloSection + ')',
    'cattle-history-title': t.uploadHistory + ' (' + t.cattleSection + ')',
    'buffalo-clear-btn': t.clearHistory,
    'cattle-clear-btn': t.clearHistory
  };

  // Update table headers and labels
  const labels = {
    'body-length-label': t.bodyLength,
    'height-label': t.height,
    'chest-width-label': t.chestWidth,
    'rump-angle-label': t.rumpAngle,
    'breed-name-label': t.breedName,
    'origin-state-label': t.originState,
    'key-features-label': t.keyFeatures,
    'productivity-label': t.productivity,
    'fat-percent-label': t.fatPercent,
    'confidence-label': t.confidence,
    'c-body-length-label': t.bodyLength,
    'c-height-label': t.height,
    'c-chest-width-label': t.chestWidth,
    'c-rump-angle-label': t.rumpAngle,
    'c-breed-name-label': t.breedName,
    'c-origin-state-label': t.originState,
    'c-key-features-label': t.keyFeatures,
    'c-productivity-label': t.productivity,
    'c-confidence-label': t.confidence
  };

  // Update navigation bar with language-specific shortened titles
  const navTitles = {
    'en': 'Breed Recognition System',
    'ta': 'роЗрой роЕроЯрпИропро╛ро│ роЕроорпИрокрпНрокрпБ',
    'hi': 'рдирд╕реНрд▓ рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА',
    'ml': 'р┤Зр┤и р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜ р┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤В'
  };
  
  const navElements = {
    'nav-brand': navTitles[currentLang] || navTitles['en'],
    'nav-home-btn': `<span>ЁЯПа</span> ${t.home}`,
    'nav-export-btn': `<span>ЁЯУд</span> ${t.export}`,
    'nav-import-btn': `<span>ЁЯУе</span> ${t.import}`
  };

  // Update history table headers
  const historyHeaders = {
    'buffalo-history-headers': `
      <tr>
        <th>#</th><th>${t.image}</th><th>${t.bodyLength}</th><th>${t.height}</th>
        <th>${t.chestWidth}</th><th>${t.rumpAngle}</th><th>${t.breedName}</th>
        <th>${t.originState}</th><th>${t.keyFeatures}</th><th>${t.productivity}</th>
        <th>${t.fatPercent}</th><th>${t.confidence}</th><th>${t.action}</th>
      </tr>`,
    'cattle-history-headers': `
      <tr>
        <th>#</th><th>${t.image}</th><th>${t.bodyLength}</th><th>${t.height}</th>
        <th>${t.chestWidth}</th><th>${t.rumpAngle}</th><th>${t.breedName}</th>
        <th>${t.originState}</th><th>${t.keyFeatures}</th><th>${t.productivity}</th>
        <th>${t.fatPercent}</th><th>${t.confidence}</th><th>${t.action}</th>
      </tr>`
  };

  // Apply translations
  Object.keys(elements).forEach(id => {
    const element = document.getElementById(id);
    if (element) element.textContent = elements[id];
  });

  Object.keys(labels).forEach(id => {
    const element = document.getElementById(id);
    if (element) element.textContent = labels[id];
  });

  Object.keys(navElements).forEach(id => {
    const element = document.getElementById(id);
    if (element) element.innerHTML = navElements[id];
  });

  Object.keys(historyHeaders).forEach(id => {
    const element = document.getElementById(id);
    if (element) element.innerHTML = historyHeaders[id];
  });
  
  // Rebuild history tables to update delete button text
  rebuildHistoryTables();
}

// Upload and data handling functions
function reUploadBuffalo() {
  document.getElementById("imageUpload").value = "";
  document.getElementById("imageContainer").innerHTML = "";
  const fields = [
    "bodyLength", "height", "chestWidth", "rumpAngle",
    "breedName", "origin", "features", "productivity", "fat", "confidence"
  ];
  fields.forEach(id => document.getElementById(id).value = "");
}

function clearHistoryBuffalo() {
  document.getElementById("historyTable").innerHTML = "";
  buffaloHistory = [];
  buffaloCount = 0;
  saveToLocalStorage();
}

function reUploadCattle() {
  document.getElementById("cattleUpload").value = "";
  document.getElementById("cattleImageContainer").innerHTML = "";
  const fields = [
    "c_bodyLength", "c_height", "c_chestWidth", "c_rumpAngle",
    "c_breedName", "c_origin", "c_features", "c_productivity", "c_confidence"
  ];
  fields.forEach(id => document.getElementById(id).value = "");
}

function clearHistoryCattle() {
  document.getElementById("cattleHistoryTable").innerHTML = "";
  cattleHistory = [];
  cattleCount = 0;
  saveToLocalStorage();
}

// Data export/import functions
function exportData() {
  const data = {
    buffaloHistory: buffaloHistory,
    cattleHistory: cattleHistory,
    buffaloCount: buffaloCount,
    cattleCount: cattleCount,
    currentLang: currentLang,
    exportDate: new Date().toISOString(),
    version: "1.0"
  };
  
  const dataStr = JSON.stringify(data, null, 2);
  const dataBlob = new Blob([dataStr], {type: 'application/json'});
  
  const link = document.createElement('a');
  link.href = URL.createObjectURL(dataBlob);
  link.download = `breed-recognition-data-${new Date().toISOString().split('T')[0]}.json`;
  link.click();
}

function importData() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  
  input.onchange = function(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(event) {
      try {
        const importedData = JSON.parse(event.target.result);
        
        // Validate data structure
        if (importedData.buffaloHistory && importedData.cattleHistory) {
          buffaloHistory = importedData.buffaloHistory || [];
          cattleHistory = importedData.cattleHistory || [];
          buffaloCount = importedData.buffaloCount || buffaloHistory.length;
          cattleCount = importedData.cattleCount || cattleHistory.length;
          
          if (importedData.currentLang) {
            currentLang = importedData.currentLang;
            document.getElementById("languageSelect").value = currentLang;
          }
          
          saveToLocalStorage();
          rebuildHistoryTables();
          updateUILanguage();
          
          alert('Data imported successfully!');
        } else {
          alert('Invalid file format. Please select a valid backup file.');
        }
      } catch (error) {
        alert('Error reading file. Please make sure it\'s a valid JSON file.');
      }
    };
    reader.readAsText(file);
  };
  
  input.click();
}

// API Helper Functions
async function apiCall(endpoint, options = {}) {
  try {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API call failed:', error);
    throw error;
  }
}

// User Management
async function initializeUser() {
  try {
    const existingUserId = localStorage.getItem('userId');
    const result = await apiCall('/user/init', {
      method: 'POST',
      body: JSON.stringify({ existingUserId })
    });
    
    userId = result.userId;
    localStorage.setItem('userId', userId);
    
    if (result.settings) {
      currentLang = result.settings.currentLang || 'en';
    }
    
    return result;
  } catch (error) {
    console.error('Failed to initialize user:', error);
    // Fallback to localStorage if API fails
    userId = localStorage.getItem('userId') || 'offline_user_' + Date.now();
    localStorage.setItem('userId', userId);
    return { userId, offline: true };
  }
}

async function updateUserSettings() {
  if (!userId) return;
  
  try {
    await apiCall(`/user/${userId}/settings`, {
      method: 'PUT',
      body: JSON.stringify({ currentLang })
    });
  } catch (error) {
    console.error('Failed to update user settings:', error);
  }
}

// Cloud Data Functions
async function loadBuffaloHistory() {
  if (!userId) return;
  
  try {
    const history = await apiCall(`/buffalo/${userId}`);
    buffaloHistory = history;
    buffaloCount = history.length;
  } catch (error) {
    console.error('Failed to load buffalo history:', error);
    // Fallback to localStorage
    loadFromLocalStorage();
  }
}

async function loadCattleHistory() {
  if (!userId) return;
  
  try {
    const history = await apiCall(`/cattle/${userId}`);
    cattleHistory = history;
    cattleCount = history.length;
  } catch (error) {
    console.error('Failed to load cattle history:', error);
    // Fallback to localStorage
    loadFromLocalStorage();
  }
}

async function saveBuffaloEntry(entryData) {
  if (!userId) return;
  
  try {
    const newEntry = await apiCall(`/buffalo/${userId}`, {
      method: 'POST',
      body: JSON.stringify(entryData)
    });
    return newEntry;
  } catch (error) {
    console.error('Failed to save buffalo entry:', error);
    // Fallback to localStorage
    saveToLocalStorage();
    throw error;
  }
}

async function saveCattleEntry(entryData) {
  if (!userId) return;
  
  try {
    const newEntry = await apiCall(`/cattle/${userId}`, {
      method: 'POST',
      body: JSON.stringify(entryData)
    });
    return newEntry;
  } catch (error) {
    console.error('Failed to save cattle entry:', error);
    // Fallback to localStorage
    saveToLocalStorage();
    throw error;
  }
}

async function deleteBuffaloEntryCloud(entryId) {
  if (!userId) return;
  
  try {
    await apiCall(`/buffalo/${userId}/${entryId}`, {
      method: 'DELETE'
    });
  } catch (error) {
    console.error('Failed to delete buffalo entry:', error);
    throw error;
  }
}

async function deleteCattleEntryCloud(entryId) {
  if (!userId) return;
  
  try {
    await apiCall(`/cattle/${userId}/${entryId}`, {
      method: 'DELETE'
    });
  } catch (error) {
    console.error('Failed to delete cattle entry:', error);
    throw error;
  }
}

async function clearBuffaloHistoryCloud() {
  if (!userId) return;
  
  try {
    await apiCall(`/buffalo/${userId}`, {
      method: 'DELETE'
    });
  } catch (error) {
    console.error('Failed to clear buffalo history:', error);
    throw error;
  }
}

async function clearCattleHistoryCloud() {
  if (!userId) return;
  
  try {
    await apiCall(`/cattle/${userId}`, {
      method: 'DELETE'
    });
  } catch (error) {
    console.error('Failed to clear cattle history:', error);
    throw error;
  }
}

// LocalStorage functions (fallback)
function saveToLocalStorage() {
  const data = {
    buffaloHistory: buffaloHistory,
    cattleHistory: cattleHistory,
    buffaloCount: buffaloCount,
    cattleCount: cattleCount,
    currentLang: currentLang,
    userId: userId
  };
  localStorage.setItem('breedRecognitionData', JSON.stringify(data));
}

function loadFromLocalStorage() {
  const savedData = localStorage.getItem('breedRecognitionData');
  if (savedData) {
    const data = JSON.parse(savedData);
    buffaloHistory = data.buffaloHistory || [];
    cattleHistory = data.cattleHistory || [];
    buffaloCount = data.buffaloCount || 0;
    cattleCount = data.cattleCount || 0;
    currentLang = data.currentLang || "en";
    userId = data.userId || userId;
  }
  
  // Also check for language preference from home page
  const savedLang = localStorage.getItem('selectedLanguage');
  if (savedLang) {
    currentLang = savedLang;
  }
}

function rebuildHistoryTables() {
  const t = translations[currentLang].ui;
  
  // Rebuild buffalo history
  const buffaloTableBody = document.getElementById("historyTable");
  buffaloTableBody.innerHTML = "";
  buffaloHistory.forEach((entry, index) => {
    const row = `<tr>
      <td>${index + 1}</td>
      <td><img src="${entry.image}" class="thumb"></td>
      <td>${entry.bodyLength}</td>
      <td>${entry.height}</td>
      <td>${entry.chestWidth}</td>
      <td>${entry.rumpAngle}</td>
      <td>${entry.breedName}</td>
      <td>${entry.origin}</td>
      <td>${entry.features}</td>
      <td>${entry.productivity}</td>
      <td>${entry.fat}</td>
      <td>${entry.confidence}</td>
      <td><button class="delete-btn" onclick="deleteBuffaloEntry(${index})">${t.deleteEntry}</button></td>
    </tr>`;
    buffaloTableBody.insertAdjacentHTML("beforeend", row);
  });

  // Rebuild cattle history
  const cattleTableBody = document.getElementById("cattleHistoryTable");
  cattleTableBody.innerHTML = "";
  cattleHistory.forEach((entry, index) => {
    const row = `<tr>
      <td>${index + 1}</td>
      <td><img src="${entry.image}" class="thumb"></td>
      <td>${entry.bodyLength}</td>
      <td>${entry.height}</td>
      <td>${entry.chestWidth}</td>
      <td>${entry.rumpAngle}</td>
      <td>${entry.breedName}</td>
      <td>${entry.origin}</td>
      <td>${entry.features}</td>
      <td>${entry.productivity}</td>
      <td>-</td>
      <td>${entry.confidence}</td>
      <td><button class="delete-btn" onclick="deleteCattleEntry(${index})">${t.deleteEntry}</button></td>
    </tr>`;
    cattleTableBody.insertAdjacentHTML("beforeend", row);
  });
}

// Event listeners
document.addEventListener("DOMContentLoaded", function () {
  // Load saved data on page load
  loadFromLocalStorage();
  updateUILanguage();
  
  // Add scroll event listener for return to top button
  window.addEventListener('scroll', handleScroll);
  // Buffalo Upload Handler
  document.getElementById("imageUpload").addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (ev) {
      const imgSrc = ev.target.result;
      document.getElementById("imageContainer").innerHTML = 
        `<img src="${imgSrc}" style="max-width:300px; border-radius:10px;">`;

      const data = translations[currentLang].buffalo;
      document.getElementById("bodyLength").value = data.bodyLength;
      document.getElementById("height").value = data.height;
      document.getElementById("chestWidth").value = data.chestWidth;
      document.getElementById("rumpAngle").value = data.rumpAngle;
      document.getElementById("breedName").value = data.breedName;
      document.getElementById("origin").value = data.origin;
      document.getElementById("features").value = data.features;
      document.getElementById("productivity").value = data.productivity;
      document.getElementById("fat").value = data.fat;
      document.getElementById("confidence").value = data.confidence;

      // Create history entry
      const historyEntry = {
        image: imgSrc,
        bodyLength: data.bodyLength,
        height: data.height,
        chestWidth: data.chestWidth,
        rumpAngle: data.rumpAngle,
        breedName: data.breedName,
        origin: data.origin,
        features: data.features,
        productivity: data.productivity,
        fat: data.fat,
        confidence: data.confidence,
        timestamp: new Date().toISOString()
      };

      buffaloHistory.push(historyEntry);
      buffaloCount++;

      const t = translations[currentLang].ui;
      const row = `<tr>
        <td>${buffaloCount}</td>
        <td><img src="${imgSrc}" class="thumb"></td>
        <td>${data.bodyLength}</td>
        <td>${data.height}</td>
        <td>${data.chestWidth}</td>
        <td>${data.rumpAngle}</td>
        <td>${data.breedName}</td>
        <td>${data.origin}</td>
        <td>${data.features}</td>
        <td>${data.productivity}</td>
        <td>${data.fat}</td>
        <td>${data.confidence}</td>
        <td><button class="delete-btn" onclick="deleteBuffaloEntry(${buffaloHistory.length - 1})">${t.deleteEntry}</button></td>
      </tr>`;
      document.getElementById("historyTable").insertAdjacentHTML("beforeend", row);

      // Save to localStorage
      saveToLocalStorage();
    };
    reader.readAsDataURL(file);
  });

  // Cattle Upload Handler
  document.getElementById("cattleUpload").addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function (ev) {
      const imgSrc = ev.target.result;
      document.getElementById("cattleImageContainer").innerHTML = 
        `<img src="${imgSrc}" style="max-width:300px; border-radius:10px;">`;

      const data = translations[currentLang].cattle;
      document.getElementById("c_bodyLength").value = data.bodyLength;
      document.getElementById("c_height").value = data.height;
      document.getElementById("c_chestWidth").value = data.chestWidth;
      document.getElementById("c_rumpAngle").value = data.rumpAngle;
      document.getElementById("c_breedName").value = data.breedName;
      document.getElementById("c_origin").value = data.origin;
      document.getElementById("c_features").value = data.features;
      document.getElementById("c_productivity").value = data.productivity;
      document.getElementById("c_confidence").value = data.confidence;

      // Create history entry
      const historyEntry = {
        image: imgSrc,
        bodyLength: data.bodyLength,
        height: data.height,
        chestWidth: data.chestWidth,
        rumpAngle: data.rumpAngle,
        breedName: data.breedName,
        origin: data.origin,
        features: data.features,
        productivity: data.productivity,
        confidence: data.confidence,
        timestamp: new Date().toISOString()
      };

      cattleHistory.push(historyEntry);
      cattleCount++;

      const t = translations[currentLang].ui;
      const row = `<tr>
        <td>${cattleCount}</td>
        <td><img src="${imgSrc}" class="thumb"></td>
        <td>${data.bodyLength}</td>
        <td>${data.height}</td>
        <td>${data.chestWidth}</td>
        <td>${data.rumpAngle}</td>
        <td>${data.breedName}</td>
        <td>${data.origin}</td>
        <td>${data.features}</td>
        <td>${data.productivity}</td>
        <td>-</td>
        <td>${data.confidence}</td>
        <td><button class="delete-btn" onclick="deleteCattleEntry(${cattleHistory.length - 1})">${t.deleteEntry}</button></td>
      </tr>`;
      document.getElementById("cattleHistoryTable").insertAdjacentHTML("beforeend", row);

      // Save to localStorage
      saveToLocalStorage();
    };
    reader.readAsDataURL(file);
  });
});